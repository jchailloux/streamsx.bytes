/* Additional includes go here */
#include <jansson.h>
#include <boost/algorithm/string.hpp>
#include <iomanip>
#include <BytesFunctions.h>

<%SPL::CodeGen::implementationPrologue($model);%>
<%
use BytesParserCommon;
BytesParserCommon::Init($model);
#Need to check if the output schema is ExtractedParameter
%>

void readParameterDef(ParameterDef &p,json_t *element){
	SPLAPPTRC(L_TRACE, "->readParameterDef", SPL_OPER_DBG);
	json_t *value;
    const char *key;
	json_object_foreach(element, key, value) {
        if(strcmp(key,"byte") ==0){
        	p.byteNumber=json_integer_value(value);
        }
        if(strcmp(key,"name") ==0){
        	p.name=json_string_value(value);
        }
        if(strcmp(key,"description") ==0){
        	p.description=json_string_value(value);
        }
        if(strcmp(key,"unit") ==0){
        	p.unit=json_string_value(value);
        }
        if(strcmp(key,"format") ==0){
        	p.format=json_string_value(value);
        }
        if(strcmp(key,"start") ==0){
        	p.start=json_integer_value(value)-1;
        }
        if(strcmp(key,"length") ==0){
        	p.length=json_integer_value(value);
        }
        if(strcmp(key,"factor") ==0){
        	p.factor=json_real_value(value);
        }
        if(strcmp(key,"offset") ==0){
        	p.offset=json_real_value(value);
        }
        if(strcmp(key,"limit") ==0){
        	p.limit=json_integer_value(value);
        }
        if(strcmp(key,"endianness") ==0){
            if(strcmp(json_string_value(value),"LittleEndian") ==0){
				p.endianness=false;
            }else{
				p.endianness=true;
            }
        }
        if(strcmp(key,"signed") ==0){
        	p.isSigned=json_is_true(value);
        }
	}
	SPLAPPTRC(L_TRACE, "<-readParameterDef", SPL_OPER_DBG);
}
void readMultiplexDef(MultiplexDef &multiplex,json_t *element){
	SPLAPPTRC(L_TRACE, "->readMultiplexDef", SPL_OPER_DBG);
	json_t *value;
    const char *key;
//	json_t *packet=NULL;
    json_object_foreach(element, key, value) {
        if(strcmp(key,"inlinevalue") ==0){
        	multiplex.inlineValue=json_integer_value(value);
        }
        if(strcmp(key,"parameters") ==0){
        	if(!json_is_array(value)){
        		return;
        	}

        	size_t size = json_array_size(value);
	        for (size_t i = 0; i < size; i++) {
	        	ParameterDef p;
	        	readParameterDef(p,json_array_get(value, i));		//Store the packet part to ensure that we read all elements before starting to parse packets
	        	multiplex.parameters.push_back(p);
			}
        }
	}
//    readPacketLevel(message,packet);
//    o.messages.push_back(message);
	SPLAPPTRC(L_TRACE, "<-readMultiplexDef", SPL_OPER_DBG);
}

void readMessageDef(json_t *element){
	SPLAPPTRC(L_TRACE, "->readMessageDef", SPL_OPER_DBG);
	json_t *value;
    const char *key;
	MessageDef message;
//	json_t *packet=NULL;
    json_object_foreach(element, key, value) {
        if(strcmp(key,"name") ==0){
        	message.name=json_string_value(value);
        }
        if(strcmp(key,"bytes") ==0){
        	message.bytes=json_integer_value(value);
        }
        if(strcmp(key,"byte container length") ==0){
        	message.byteContainerLength=json_integer_value(value);
        }
        if(strcmp(key,"endianness") ==0){
            if(strcmp(json_string_value(value),"LittleEndian") ==0){
				message.endianness=false;
            }else{
				message.endianness=true;
            }
        }
        if(strcmp(key,"byte length") ==0){
        	message.byteLength=json_integer_value(value);
        }
        if(strcmp(key,"elapse") ==0){
        	message.elapse=json_real_value(value);
        }
        if(strcmp(key,"have identifier") ==0){
        	message.haveIdentifier=json_is_true(value);
        }
        if(strcmp(key,"identifier") ==0){
        	message.identifier=json_string_value(value);
        }
        if(strcmp(key,"inline parameter") ==0){
        	ParameterDef p;
        	readParameterDef(p,value);		//Store the packet part to ensure that we read all elements before starting to parse packets
        	message.inlineParameter=p;
        }
        if(strcmp(key,"multiplex") ==0){
        	if(!json_is_array(value)){
        		return;
        	}

        	size_t size = json_array_size(value);
	        for (size_t i = 0; i < size; i++) {
	        	MultiplexDef m;
	        	readMultiplexDef(m,json_array_get(value, i));
	        	message.multiplex.push_back(m);
			}
        }
	}
//    readPacketLevel(message,packet);
    object.messages.push_back(message);
	SPLAPPTRC(L_TRACE, "<-readMessageDef", SPL_OPER_DBG);
}
void readDictionnaryDef(json_t *element){
	SPLAPPTRC(L_TRACE, "->readDictionnaryDef", SPL_OPER_DBG);
	json_t *value;
    const char *key;
	string k;
	string v;
    json_object_foreach(element, key, value) {
        if(strcmp(key,"ascii") ==0){
        	k=json_string_value(value);
        }
        if(strcmp(key,"binary") ==0){
        	v=json_string_value(value);
        }
        object.dictionnary[k.c_str()[0]]=v;
    }
	SPLAPPTRC(L_TRACE, "<-readDictionnaryDef", SPL_OPER_DBG);
}

void readObjectDef(json_t *element){
	SPLAPPTRC(L_TRACE, "->readObjectDef", SPL_OPER_DBG);
	json_t *value;
    const char *key;
    json_object_foreach(element, key, value) {
        if(strcmp(key,"Object") ==0){
        	SPLAPPTRC(L_DEBUG, "Object found", SPL_OPER_DBG);
        	readObjectDef(value);
        }
        if(strcmp(key,"name") ==0){
        	object.name = json_string_value(value);

        }
        if(strcmp(key,"messages") ==0){
        	if(!json_is_array(value)){
        		return;
        	}

        	size_t size = json_array_size(value);
	        for (size_t i = 0; i < size; i++) {
	        	readMessageDef(json_array_get(value, i));
			}
        }
        if(strcmp(key,"dictionnary") ==0){
        	if(!json_is_array(value)){
        		return;
        	}

        	size_t size = json_array_size(value);
	        for (size_t i = 0; i < size; i++) {
	        	readDictionnaryDef(json_array_get(value, i));
			}
        }
	}
	SPLAPPTRC(L_TRACE, "<-readObjectDef", SPL_OPER_DBG);
}


void printParameterDef(ParameterDef p,string indent){
	SPLAPPTRC(L_DEBUG, indent <<"--------Parameter-------- ", SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG,  indent <<" name : "<< p.name, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG,  indent <<" desc : "<< p.description, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG,  indent <<" unit : "<< p.unit, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG,  indent <<" signed : "<<p.isSigned , SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG,  indent <<" endianness : "<< p.endianness, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG,  indent <<" byte : "<< p.byteNumber, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG,  indent <<" start : "<< p.start, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG,  indent <<" length : "<<p.length, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG, indent <<" format : "<< p.format, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG, indent <<" factor : "<< p.factor, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG, indent <<" offset : "<< p.offset, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG,  indent <<" limit : "<< p.limit, SPL_OPER_DBG);
}
void printDictionnaryDef(){
	SPLAPPTRC(L_DEBUG,  "--------Dictionnary-------- ", SPL_OPER_DBG);
    for ( std::map< char, string, std::less< int > >::const_iterator iter = object.dictionnary.begin();iter != object.dictionnary.end(); ++iter )
    	SPLAPPTRC(L_DEBUG, "\t"<< iter->first << "\t-->\t" << iter->second , SPL_OPER_DBG);
}
void printMultiplexDef(MultiplexDef multiplex,string indent){
	SPLAPPTRC(L_DEBUG,  indent <<" ---------------- ", SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG,  indent <<" inline value : "<<multiplex.inlineValue, SPL_OPER_DBG);
	for(unsigned int k=0; k < multiplex.parameters.size(); k++){
		printParameterDef(multiplex.parameters[k],indent+"\t");
	}
}
void printMessageDef(MessageDef message,string indent){

	SPLAPPTRC(L_DEBUG, indent <<" message name : " << message.name, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG,  indent <<" message desc : " << message.description, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG,  indent <<" message byte : " << message.bytes, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG,  indent <<" message length : " << message.byteLength, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG,  indent <<" message container : " << message.byteContainerLength, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG,  indent <<" message endianness : " << message.endianness, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG,  indent <<" message elapse : " << message.elapse, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG,  indent <<" message have identifier : " << message.haveIdentifier, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG,  indent <<" message identifier : " << message.identifier, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG,  indent <<" message inlineParameter : " , SPL_OPER_DBG);
	printParameterDef(message.inlineParameter,indent+"\t");
	for(unsigned int i=0; i < message.multiplex.size(); i++){
		printMultiplexDef(message.multiplex[i],indent+"\t");
	}

}
void printObjectDef(){
	SPLAPPTRC(L_DEBUG,  "Object : " << object.name, SPL_OPER_DBG);
	SPLAPPTRC(L_DEBUG, "Number of messages : " << object.messages.size(), SPL_OPER_DBG);
	for(unsigned int i=0; i < object.messages.size(); i++){
		printMessageDef( object.messages[i],"\t");
	}
	printDictionnaryDef();
}
void loadExtractorSchema(string fileName){
	SPLAPPTRC(L_TRACE, "->loadExtractorSchema", SPL_OPER_DBG);
    ready=false;
	json_t *value;
	json_error_t error;
	value = json_load_file(fileName.c_str(), 0, &error);
	if(!value){
		SPLAPPTRC(L_ERROR, "error: on line " << ": " << error.text, SPL_OPER_DBG);
		return;
	}
	SPLAPPTRC(L_DEBUG, "JSON read", SPL_OPER_DBG);
	readObjectDef(value);
	printObjectDef();
    ready=true;
	SPLAPPTRC(L_TRACE, "<-loadExtractorSchema", SPL_OPER_DBG);
}
void reverseBinary(boost::dynamic_bitset<> &from,boost::dynamic_bitset<> &to){
	unsigned int sz=from.size();
	for (unsigned int i = 0; i < sz; i++)
		to[(sz-1) - i] = from[i];
}
void reverseBinary(boost::dynamic_bitset<> &to){
	boost::dynamic_bitset<> from(to);
	unsigned int sz=from.size();
	for (unsigned int i = 0; i < sz; i++)
		to[(sz-1) - i] = from[i];
}
// Constructor
MY_OPERATOR::MY_OPERATOR()
{
    // Initialization code goes here
	loadExtractorSchema(<%=$::file->getValueAt(0)->getSPLExpression()%>);
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
    // Finalization code goes here
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
    // Notifies that all ports are ready. No tuples should be submitted before
    // this. Source operators can use this method to spawn threads.

    /*
      createThreads(1); // Create source thread
    */
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    // This is an asynchronous call
}

// Processing for source and threaded operators   
void MY_OPERATOR::process(uint32_t idx)
{
    // A typical implementation will loop until shutdown
    /*
      while(!getPE().getShutdownRequested()) {
          // do work ...
      }
    */
}

// Tuple processing for mutating ports 
void MY_OPERATOR::process(Tuple & tuple, uint32_t port)
{


	const <%=$::inputPortZeroTupleType%>& <%=$::inputPortZeroTupleName%> = static_cast<const <%=$::inputPortZeroTupleType%>&>(tuple);
	OPort0Type otuple;

	//Assign maching attributes from input tuple to output tuple
	otuple.assignFrom(tuple,false);
	
	/*
	 * Wait while loading le definition's file
	 * If a a new definition's file is received on the optional input port 1
	 */
//	while(!ready){
//		cout << "Waiting ...." <<endl;
//		::SPL::Functions::Utility::block(1);
//	}


	/*
	 * Make the input message a String
	 */
	string inputMessage ;
	 	 <%
	 	 my $inputList;
	 	 foreach my $attribute (@{$::inputPortZero->getAttributes()}) {          
	 		 my $name = $attribute->getName();
	 		 my ($a) = $::message->getValueAt(0)->getSPLExpression() =~ /((\.[^.\s]+)+)$/;
	 		 $a =~ s/\.//g;
	 		 print "//$name\n";
			 print "//$a\n";
			 if($name eq $a){
				my $splType = $attribute->getSPLType();
				if(SPL::CodeGen::Type::isBlob($splType)){
		%>
	ostringstream oss;
	oss << <%=$::message->getValueAt(0)->getCppExpression()%>;
	inputMessage= oss.str();
	   	<%
	    	}
	    	if(SPL::CodeGen::Type::isString($splType)){
	    %>
	inputMessage= <%=$::message->getValueAt(0)->getCppExpression()%>;
	    <%
	    	}
   		last;
    	}
  	}
	%>

	SPLAPPTRC(L_DEBUG, "Input received " << ": " << inputMessage, SPL_OPER_DBG);

	

	string extractedIdentifier;
	bool isMessageDefFound=false;
	bool isMultiplexDefFound=false;
	/*
	 * Search for the message that could match the identifier
	 */
	for(int messageCounter=0; messageCounter < object.messages.size(); messageCounter++){

		/*
		 * Extract the identifier from message or use the one passed as attribute
		 */
		if(object.messages[messageCounter].haveIdentifier){
			SPLAPPTRC(L_DEBUG, "Having a delimiter. Will extract and remove it from the input  " << ": " << inputMessage, SPL_OPER_DBG);
			extractedIdentifier=SPL::Functions::String::subSlice (inputMessage, 0,object.messages[messageCounter].identifier.length());
			SPLAPPTRC(L_DEBUG, "Delimiter extracted " << ": " << extractedIdentifier, SPL_OPER_DBG);
		}else {
			<%
			if ($::identifier  ne 'NONE') {
			%>
				extractedIdentifier=<%=$::identifier->getValueAt(0)->getCppExpression()%>;
			<%
			}else {
			%>
				extractedIdentifier=object.messages[messageCounter].identifier;
			<%
			}
			%>
		}

		int start;
		/*
		 * Match the identifier and remove
		 */
		if(boost::iequals(extractedIdentifier, object.messages[messageCounter].identifier)){
			isMessageDefFound=true;
			<%
			if ($::identifier  ne 'NONE') {
			%>
				start=0;
			<%
			}else {
			%>
				start=object.messages[messageCounter].haveIdentifier ?object.messages[messageCounter].identifier.length():0;;
			<%
			}
			%>
			if(object.messages[messageCounter].bytes == 1){
				inputMessage=SPL::Functions::String::subSlice (inputMessage, start,inputMessage.length());
				SPLAPPTRC(L_DEBUG, "New input " << ": " << inputMessage, SPL_OPER_DBG);
			}
			/*
			 * 
			 */
		    boost::dynamic_bitset<> binary;
			if(object.dictionnary.size() > 0){
				binary= boost::dynamic_bitset<>(com::ibm::streamsx::bytes::conversion::convertFromHexToBinaryUsingDictionnary(inputMessage,object.dictionnary));
			}else{
				binary= boost::dynamic_bitset<>(com::ibm::streamsx::bytes::conversion::convertFromHexToBinary(inputMessage));
			}
			SPLAPPTRC(L_DEBUG, "Binary : "<<binary, SPL_OPER_DBG);
			otuple.set_objectName(object.name);
			otuple.set_messageName( object.messages[messageCounter].name);
			otuple.set_messageDescription( object.messages[messageCounter].description);
			/*
			 * Do we have an inline parameter : multiplex ?
			 */
			int inlineValue=0;
			if(!object.messages[messageCounter].inlineParameter.name.empty()){
				/*
				 * inline parameter
				 */
				boost::dynamic_bitset<> extracted;
			    extracted=(binary>>(binary.size()-(object.messages[messageCounter].inlineParameter.start+object.messages[messageCounter].inlineParameter.length)));
				extracted.resize(object.messages[messageCounter].inlineParameter.length);
				inlineValue=extracted.to_ulong();
			}
			SPLAPPTRC(L_DEBUG,"inlineValue to look for : "<<inlineValue, SPL_OPER_DBG);
			for(int multiplexCounter=0; multiplexCounter < object.messages[messageCounter].multiplex.size(); multiplexCounter++){
				if(object.messages[messageCounter].multiplex[multiplexCounter].inlineValue == inlineValue){
					isMultiplexDefFound=true;
					/*
					 * Multiplex found
					 */
					SPLAPPTRC(L_DEBUG,"multiplex found : "<< object.messages[messageCounter].multiplex[multiplexCounter].inlineValue, SPL_OPER_DBG);
					for(int parameterCounter=0; parameterCounter < object.messages[messageCounter].multiplex[multiplexCounter].parameters.size(); parameterCounter++){
						SPLAPPTRC(L_DEBUG,"param to extract : "<< object.messages[messageCounter].multiplex[multiplexCounter].parameters[parameterCounter].name, SPL_OPER_DBG);
						/*
						 * Need to extract the byte, rotate, reduce
						 */
						boost::dynamic_bitset<> byte;
					    byte=(binary>>(binary.size()-(object.messages[messageCounter].multiplex[multiplexCounter].parameters[parameterCounter].byteNumber*object.messages[messageCounter].byteContainerLength)));
						byte.resize(object.messages[messageCounter].byteContainerLength);
						SPLAPPTRC(L_DEBUG,"byte extracted : "<< byte, SPL_OPER_DBG);
						/*
						 * Rotate the byte to make it "BigEndian"
						 */
						if(!object.messages[messageCounter].endianness){
							byte=	(byte >> (byte.size()-(object.messages[messageCounter].byteContainerLength/2))) | (byte << (object.messages[messageCounter].byteContainerLength/2));
							SPLAPPTRC(L_DEBUG,"byte rotated : "<< byte, SPL_OPER_DBG);
						}
								
						boost::dynamic_bitset<> reduced(byte);
//						reduced=	(byte >> (byte.size()-(object.messages[messageCounter].byteLength))) | (byte << (byte.size()-(object.messages[messageCounter].byteLength)));
//						reduced=	(byte >> (byte.size()-(object.messages[messageCounter].byteLength))) | (byte << (byte.size()-(object.messages[messageCounter].byteLength)));
						SPLAPPTRC(L_DEBUG,"byte moved befor resize : "<< reduced, SPL_OPER_DBG);
						reduced.resize(object.messages[messageCounter].byteLength);
						SPLAPPTRC(L_DEBUG,"byte resized : "<< reduced, SPL_OPER_DBG);
						/*
						 * If MSB on the right (LittleEndian) reverse bits to make it BigEndian 
						 */
						if(!object.messages[messageCounter].multiplex[multiplexCounter].parameters[parameterCounter].endianness){
							reverseBinary(reduced);
							SPLAPPTRC(L_DEBUG,"bits extracted reversed : "<< reduced, SPL_OPER_DBG);
						}
						/*
						 * Extract bits from the byte
						 */
						boost::dynamic_bitset<> extracted(reduced);
						/*
						 * Compute how many bits we have to move to have the value
						 */
						int move = object.messages[messageCounter].multiplex[multiplexCounter].parameters[parameterCounter].start+object.messages[messageCounter].multiplex[multiplexCounter].parameters[parameterCounter].length;
						if(move == extracted.size())
							move = object.messages[messageCounter].multiplex[multiplexCounter].parameters[parameterCounter].length;
						/*
						 * Move bits and resize
						 */
					    extracted=(extracted>>(extracted.size()-move));
						extracted.resize(object.messages[messageCounter].multiplex[multiplexCounter].parameters[parameterCounter].length);
						SPLAPPTRC(L_DEBUG,"bits extracted : "<< extracted, SPL_OPER_DBG);
						otuple.set_parameterName( object.messages[messageCounter].multiplex[multiplexCounter].parameters[parameterCounter].name);
						otuple.set_parameterDescription( object.messages[messageCounter].multiplex[multiplexCounter].parameters[parameterCounter].description);
						otuple.set_parameterFormat( object.messages[messageCounter].multiplex[multiplexCounter].parameters[parameterCounter].format);
						otuple.set_parameterFactor( object.messages[messageCounter].multiplex[multiplexCounter].parameters[parameterCounter].factor);
						otuple.set_parameterOffset( object.messages[messageCounter].multiplex[multiplexCounter].parameters[parameterCounter].offset);
						otuple.set_parameterLimit( object.messages[messageCounter].multiplex[multiplexCounter].parameters[parameterCounter].limit);
						otuple.set_parameterUnit( object.messages[messageCounter].multiplex[multiplexCounter].parameters[parameterCounter].unit);
						ostringstream oss;
						oss<<extracted;
						otuple.set_parameterBinaryString( oss.str());
						submit(otuple,0);
					}
				}else{
					SPLAPPTRC(L_DEBUG,"multiplex not found : "<< object.messages[messageCounter].multiplex[multiplexCounter].inlineValue, SPL_OPER_DBG);
					continue;
				}
			}
			if(!(isMessageDefFound && isMultiplexDefFound)){
				submit(tuple,1);
			}
			break;
		}else{
			continue;
		}
	}
	submit(Punctuation::WindowMarker,0);
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
//	const <%=$::inputPortZeroTupleType%>& <%=$::inputPortZeroTupleName%> = static_cast<const <%=$::inputPortZeroTupleType%>&>(tuple);
//	OPort0Type otuple;
//	//Assign maching attributes from input tuple to output tuple
//	otuple.assignFrom(tuple,false);
//	cout << <%=$::message->getValueAt(0)->getCppExpression()%> << endl;
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{

	if(punct==Punctuation::FinalMarker) {
		submit(Punctuation::FinalMarker,0);
	}
	/*
      if(punct==Punctuation::WindowMarker) {
        // ...;
      } else if(punct==Punctuation::FinalMarker) {
        // ...;
      }
    */
}

<%SPL::CodeGen::implementationEpilogue($model);%>
