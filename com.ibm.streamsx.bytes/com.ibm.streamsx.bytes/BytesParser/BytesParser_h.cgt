/* Additional includes go here */
//#include <iostream>
#include <jansson.h>
//#include <fstream>
//#include <sstream>
#include <string.h>
#include <vector>
#define NUMBER_OF_BIT_PER_CHAR 4
<%
my $isInConsistentRegion =
$model->getContext()->getOptionalContext("ConsistentRegion");
my @includes;
if ($isInConsistentRegion) {
push @includes, "#include <SPL/Runtime/Operator/State/StateHandler.h>";
}
SPL::CodeGen::headerPrologue($model, \@includes);
%>
using namespace std;



class ParameterDef{
	public:
		string name;							// Name of the parameter
		string description;						// Description of the parameter
		string unit;							// Unit of the parameter
		bool isSigned;							// Is the value signed ?
		bool endianness;						// BigEndian (MSB on left), LittleEndian (MSB on right)
		int byteNumber;							// in which byte in the message the parameter is
		int start;								// Bit start in the word
		int length;								// Number of bits to extract
		string format;							// Format of the value
		float factor;							// Factor to apply to the extracted value
		float offset;							// Offset to apply to the extracted value
		float limit;							// arbitrary value used to simulate negative value related to the offset
//		string binaryString;					// String that

	protected:
};
class MultiplexDef{
	public:
		int inlineValue;						// Value of the inlineParameter
		vector<ParameterDef> parameters;		//Packets to decode

	protected:
};
class MessageDef{
	public:
		string name;							// Name of the message
		string description;						// Description of the message
		int bytes;								// Number of bytes in the message
		int byteLength;							// Length of the byte in bit
		int byteContainerLength;				// Length of the container that store the byte
		bool endianness;						// BigEndian (MSB on left), LittleEndian (MSB on right)
		float elapse;							// elapse time represented by the message
		bool haveIdentifier;					// Is the message starts with a specific word (message id)
		string identifier;						// The word used as identifier
		ParameterDef inlineParameter;			// Do we have an inline parameter (multiplex)
		vector<MultiplexDef> multiplex;			// Multiplex messages

	protected:
};
class ObjectDef{
	public:
		string name;							// Name of the Object : car model, airplane, AIS, .......
		vector<MessageDef> messages;			// Messages
		std::map<char, string> dictionnary;
};
class MY_OPERATOR : public MY_BASE_OPERATOR 
<%if ($isInConsistentRegion) {%>
, StateHandler
<%}%>
{
public:
  // Constructor
  MY_OPERATOR();

  // Destructor
  virtual ~MY_OPERATOR(); 

  // Notify port readiness
  void allPortsReady(); 

  // Notify pending shutdown
  void prepareToShutdown(); 

  // Processing for source and threaded operators   
  void process(uint32_t idx);
    
  // Tuple processing for mutating ports 
  void process(Tuple & tuple, uint32_t port);
    
  // Tuple processing for non-mutating ports
  void process(Tuple const & tuple, uint32_t port);

  // Punctuation processing
  void process(Punctuation const & punct, uint32_t port);
  <%if ($isInConsistentRegion) {%>
  // Callbacks from StateHandler.h
  virtual void checkpoint(Checkpoint & ckpt);
  virtual void reset(Checkpoint & ckpt);
  virtual void resetToInitialState();
  virtual void drain();
  virtual void retireCheckpoint(int64_t id);
  <%}%>
  private:
  // Members
  <%if ($isInConsistentRegion) {%>
  ConsistentRegionContext *_crContext;
  <%}%>  
}; 

ObjectDef object;
ObjectDef newObject;

bool ready;
<%SPL::CodeGen::headerEpilogue($model);%>
